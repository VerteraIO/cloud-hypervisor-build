%global debug_package %{nil}
%global _missing_build_ids_terminate_build 0

%if 0%{?el_version}
%global dist .el%{el_version}
%endif

%if 0%{?using_musl_libc}
%define using_musl_libc 1
%endif

# Generated by update script
# Fallback to a canary timestamped version if not provided
%global canary_ts %(date -u +%Y%m%d%H%M)
%global gitver %{?gitver}%{!?gitver:0.0.canary%{canary_ts}}
%global gitnum %{?gitnum}%{!?gitnum:0}
%global gitrev %{?gitrev}%{!?gitrev:g88ffa129}

Name:           cloud-hypervisor
Version:        %{gitver}.%{gitnum}
Release:        1%{?dist}
Summary:        Cloud Hypervisor is a Virtual Machine Monitor (VMM) that runs on top of KVM
License:        ASL 2.0 or BSD-3-clause
Group:          Applications/System
URL:            https://github.com/cloud-hypervisor/cloud-hypervisor
Source0:        cloud-hypervisor
Source1:        RELEASE_NOTES.md
Source2:        rpm_changelog.txt
Source3:        README.md
Source4:        LICENSE-APACHE
Source5:        LICENSE-BSD-3-Clause
ExclusiveArch:  x86_64 aarch64

BuildRequires:  systemd-rpm-macros

Requires: bash
Requires: glibc
Requires: libcap
Requires: libgcc
Requires: systemd
Requires(pre):  shadow-utils
Requires(post): systemd
Requires(preun): systemd
Requires(postun): systemd

%ifarch x86_64
%define rust_def_target x86_64-unknown-linux-gnu
%define cargo_pkg_feature_opts --no-default-features --features "mshv,kvm"
%if 0%{?using_musl_libc}
%define rust_musl_target x86_64-unknown-linux-musl
%endif
%endif
%ifarch aarch64
%define rust_def_target aarch64-unknown-linux-gnu
%define cargo_pkg_feature_opts --all
%if 0%{?using_musl_libc}
%define rust_musl_target aarch64-unknown-linux-musl
%endif
%endif

%description
Cloud Hypervisor is an open source Virtual Machine Monitor (VMM) that runs on top of KVM. The project focuses on exclusively running modern, cloud workloads, on top of a limited set of hardware architectures and platforms. Cloud workloads refers to those that are usually run by customers inside a cloud provider. For our purposes this means modern Linux* distributions with most I/O handled by paravirtualised devices (i.e. virtio), no requirement for legacy devices and recent CPUs and KVM. CPU, memory and device hotplug, support for running Windows and 
Linux guests, device offload with vhost-user and a minimal compact footprint.
Written in Rust with a strong focus on security.

%prep
# No prep needed for pre-built binary

%build
# No build needed for pre-built binary from SOURCES

%install
mkdir -p %{buildroot}%{_bindir}
mkdir -p %{buildroot}%{_unitdir}
mkdir -p %{buildroot}%{_sysconfdir}/cloud-hypervisor
mkdir -p %{buildroot}%{_localstatedir}/lib/cloud-hypervisor
mkdir -p %{buildroot}%{_localstatedir}/log/cloud-hypervisor
mkdir -p %{buildroot}%{_docdir}/%{name}

# Install binary
install -m 755 %{SOURCE0} %{buildroot}%{_bindir}/cloud-hypervisor

# Create systemd service file
cat > %{buildroot}%{_unitdir}/cloud-hypervisor.service << 'EOF'
[Unit]
Description=Cloud Hypervisor VMM
After=network.target

[Service]
Type=simple
User=cloud-hypervisor
Group=cloud-hypervisor
ExecStart=%{_bindir}/cloud-hypervisor
Restart=on-failure
RestartSec=5
StandardOutput=journal
StandardError=journal
SyslogIdentifier=cloud-hypervisor

# Security settings
NoNewPrivileges=true
PrivateTmp=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=%{_localstatedir}/lib/cloud-hypervisor %{_localstatedir}/log/cloud-hypervisor
CapabilityBoundingSet=CAP_NET_ADMIN CAP_SYS_ADMIN CAP_SYS_RESOURCE
AmbientCapabilities=CAP_NET_ADMIN

[Install]
WantedBy=multi-user.target
EOF

# Create default configuration
cat > %{buildroot}%{_sysconfdir}/cloud-hypervisor/cloud-hypervisor.toml << 'EOF'
# Cloud Hypervisor default configuration
# Uncomment and modify as needed

# [vm]
# cpus = "boot=1,max=4"
# memory = "size=512M,hotplug_method=acpi,hotplug_size=8G"
# kernel = "/path/to/vmlinux"
# cmdline = "console=ttyS0 reboot=k panic=1 pci=off"

# [disk]
# path = "/path/to/disk.img"
# readonly = false

# [net]
# tap = "tap0"
# mac = "12:34:56:78:90:ab"
EOF

# Install release notes and documentation
install -m 644 %{SOURCE1} %{buildroot}%{_docdir}/%{name}/RELEASE_NOTES.md
install -m 644 %{SOURCE3} %{buildroot}%{_docdir}/%{name}/README.md

# Install license files
mkdir -p %{buildroot}%{_datadir}/licenses/%{name}
install -m 644 %{SOURCE4} %{buildroot}%{_datadir}/licenses/%{name}/LICENSE-APACHE
install -m 644 %{SOURCE5} %{buildroot}%{_datadir}/licenses/%{name}/LICENSE-BSD-3-Clause

%pre
getent group cloud-hypervisor >/dev/null || groupadd -r cloud-hypervisor
getent passwd cloud-hypervisor >/dev/null || \
    useradd -r -g cloud-hypervisor -d %{_localstatedir}/lib/cloud-hypervisor \
    -s /sbin/nologin -c "Cloud Hypervisor service account" cloud-hypervisor

%post
# Set capabilities on the binary
setcap cap_net_admin+ep %{_bindir}/cloud-hypervisor || true
%systemd_post cloud-hypervisor.service

%preun
%systemd_preun cloud-hypervisor.service

%postun
%systemd_postun_with_restart cloud-hypervisor.service
if [ $1 -eq 0 ] ; then
    # Remove capabilities on uninstall
    setcap -r %{_bindir}/cloud-hypervisor 2>/dev/null || true
fi

%files
%defattr(-,root,root,-)
%caps(cap_net_admin=ep) %{_bindir}/cloud-hypervisor
%{_unitdir}/cloud-hypervisor.service
%config(noreplace) %{_sysconfdir}/cloud-hypervisor/cloud-hypervisor.toml
%dir %{_sysconfdir}/cloud-hypervisor
%dir %{_localstatedir}/lib/cloud-hypervisor
%dir %{_localstatedir}/log/cloud-hypervisor
%dir %{_docdir}/%{name}
%doc %{_docdir}/%{name}/RELEASE_NOTES.md
%doc %{_docdir}/%{name}/README.md
%dir %{_datadir}/licenses/%{name}
%license %{_datadir}/licenses/%{name}/LICENSE-APACHE
%license %{_datadir}/licenses/%{name}/LICENSE-BSD-3-Clause

%changelog
%include %{SOURCE2}
